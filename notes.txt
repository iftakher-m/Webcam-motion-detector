To work with images in python we need this library>> opencv-contrib-python

pip install opencv-contrib-python

import cv2

cv2.imread("",1/0/-1) 
-Here, 1 >> colored image (R,B,G)
       0 >> grayscale image (Black & White)
      -1 >> wil allow to use manipulate transparent option

############################################################
from facedetector.py -->

# 'CascadeClassifier' will create a 'face_cascade' object of this class in python, and inside the class the argument will be the xml file path
################################################################################
from capture.py file -->

#cv2.VideoCapture(0/1/..) >> number representes built-in video camera. the more camera, index number increases accordingly. the filepath of a video shall be passed if camera records are not meant to pass.
#cv2.GaussianBlur will blur the image (image,(21,21),0) >> image --> the image we want to blur.
                                              (21,21)   >> width, height --> 21 is the standard.
                                                0       >> standard deviation --> 0 is the standard value.

# 'check' >> boolean
# 'frame' >> numpy array that will read the very first frame of the video

# cv2.threshold(frame,30,255,cv2.THRESH_BINARY)[1] >> frame --> the frame/image i want to apply the threshold
                          30  >> threshold value   (above this will create a rgb colored object)
                          255 >> RGB value
                          cv2.THRESH_BINARY >> is a method
  For cv2.THRESH_BINARY we need to access the second item, that's why [1], for different methods we may need to use [0]

# cv2.dilate(thresh_frame, None, iterations=2) >> 'dilate' will remove blackholes from the white threshold image 
                                                None --> usually an arry shall be passed, when the program is more      sophisticated, for our case it will be None
                                                iterations --> how many times the process of removing blackholes will run,
                                                the more the smoother.

# Now to countour the image there are 2 options --> (i) find countour (ii) draw countour
find countour works by finding the countour and storing them in a tuple, draw countour draws countour in an image

(_,cnts,_) = cv2.findContours(thresh_frame.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) >> here 'findContours' clas is applied, thresh_frame.copy() --> here the copy of the file is selected so the original 'thresh_frame' won't face any issue.
cv2.RETR_EXTERNAL --> to retrieve external countours, cv2.CHAIN_APPROX_SIMPLE --> an approximation method to retrieve countours. (here the tuple is quite peculiar) and the countrours will be stored in 'cnts'
# video.release() >> stops the video
